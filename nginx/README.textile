h1. Описание

Рецепт для установки и автоматической конфигурации Nginx. Исключительно под Debian.

После первичной установки вы получаете следующие плюшки:

* Установленный и православно сконфигурированный Nginx.
* Nginx-status на 127.0.0.1.
* Мониторинг sites-enabled на предмет левых файлов.

h2. Требования

Для работы рецепта на ноде обязательно должен присутствовать рецепт php-fpm.

h2. Вспомогательные файлы

* @/opt/chef/nginx/templates/*@ - волшебные файлы для генерации конфигов.
* @/opt/chef/nginx/custom_templates/*@ - индивидуальные волшебные файлы для генерации конфигов.
* @/opt/chef/nginx/maintainance/*@ - сайт-заглушка на время проведения работ на сервере.

h1. Настройка

Вся конфигурация самого сервера, а также всех виртуальных хостов хранится в атрибутах ноды. Редактирование этой конфигурации производится из веб-интерфейса Chef-а, либо напрямую редактированием ноды через Knife.

bq. Удобный инструмент для редактирования и валидирования JSON-ов "jsonlint.com":http://www.jsonlint.com.

h2. Пример конфигурации

Ниже приводится конфигурация обычного сайта на PHP через PHP-FPM со статикой в нестандартном месте, плюс в ней показаны значения опций по умолчанию, так что, фактически, непосредственно сама конфигурация ещё меньше. [] - необязательный параметр.
<pre><code>nginx
├── user: (www-data)
├── mode: production
├── dirs
│   ├── config: (/etc/nginx)
│   ├── templates: (/opt/chef/nginx/templates)
│   ├── logs: (/var/log/nginx)
│   └── maintainance: (/opt/chef/nginx/maintainance)
├── server
│   ├── workers
│   │   ├── connections: (1024)
│   │   └── processes: (количество CPU)
│   ├── gzip
│   │   ├── enabled: (true)
│   │   ├── compression_level: (2)
│   │   ├── disable_for: (MSIE [1-6]\.(?!.*SV1))
│   │   ├── http_version: (1.0)
│   │   └── mime_types: ["text/html", ...]
│   └── settings
│       ├── (keepalive_timeout: 60),
│       ├── (server_names_hash_bucket: 64)
│       ├── (client_max_body_size: "30M")
│       ├── (client_body_timeout: 10)
│       └── [...]
└── sites
    ├── "site.ru"
    │    ├── modes: production[, ...]
    │    ├── listen: "123.45.67.89:80", ...
    │    ├── names: 'site.ru', 'www.site.ru', ...
    │    ├── [charset: "utf-8"]
    │    └── templates
    │        ├── 0: { name: "location-root" }
    │        ├── 1: { name: "location-static", args: { root: "/some/weird/path/to/static/files" } }
    │        └── 2: { name: "backend-php-fpm", args: { backend: "pool_0" } }
    └── ...</code></pre>

h2. Общие шаблоны

В @/opt/chef/nginx/templates@ лежат небольшие erb-файлы (которые берутся из самого рецепта), из которых и собирается конфиг. При каждом Шеф-ране, парсер автоматически подгружает шаблоны и передаёт им параметры из json-а виртуального хоста, а также атрибуты ноды. Таким образом, можно под каждый класс задач написать свои маленький шаблон, как угодно его параметризировать, придумать значения по умолчанию и использовать в рецептах.

h3. Текущий список шаблонов с описаниями

Вообще, идея в том, что можно вкладывать любые шаблоны в любые другие шаблоны. И, даже если такого шаблона нет, парсер просто поставит в конфиг строку вида @name args;@. Таким образом, вы можете в @templates@ указывать либо имя шаблона с его аргументами, либо любую другую директиву nginx-а - она просто отпарсится как есть. По этой же причине, в следующей таблице указаны не все, а наиболее полезные параметры.

|_. Имя |_. Назначение |_.  Параметры |_. Значение по умолчанию |
| location-base | Базовый location, следующие location-ы используют его, как основу. Вы тоже можете. | @location@ | Значение по умолчанию отсутствует |
| location-root | Отдаёт всё из определённой директории | @root@ | /var/www/virtual-hosts/<имя_сайта> |
|| Массив строк вида @{ "/mary /juana" }@ | @rewrites@ | [] |
||| @index@ | index.php index.phtml index.html index.htm |
| location-static | Отдаёт статитку из определённой директории, отключает access_log, включает клиентский кеш | @root@ | /var/www/static/<имя_сайта> |
||| @expires@ | 24h |
| backend-php-fpm | Перенаправляет запрос на PHP5-FPM | @location@ | ~ \.(php&#124;php4&#124;php5&#124;phtml)$ |
||| @root@ | /var/www/virtual-hosts/<имя_сайта> |
|| Параметры для fastcgi_param | @fcgi@ | Их много, смотрите сам шаблон |
|| Параметры для директивы try_files | @try_files@ | $fastcgi_script_name =404 |
|| Указывает на имя пула в PHP-FPM | @backend@ | pool_0 |
||| @root@ | /var/www/virtual-hosts/<имя_сайта> |
| backend-http | Перенаправляет запрос на HTTP-сервер, например Apache2 | @location@ | / |
||| @backend@ | http://127.0.0.1:8080 |
||| @redirect@ | off |
| location-deny-svn | Запрещает доступ ко всему, что оканчивается на .svn | - | - |
| location-deny-htfiles | Запрещает доступ ко всему, что оканчивается на .ht | - | - |
| location-deny-all | Запрещает доступ ко всему вообще | - | - |
| status-nginx | Включает страничку статуса Nginx по адресу /nginx-status/ с доступом только с 127.0.0.1 | - | - |
| status-php-fpm | Включает страничку статуса для определённого PHP-FPM пула | @location@ | / |
|| Аналогично @backend-php-fpm@ | @backend@ | pool_0 |

h3. Правила написания новых шаблонов

* Не пытайтесь написать супер-комбайн, старайтесь выделить минимальную, полноценную и, главное, реюзабельную единицу конфига.
* Остальное ограничено вашей фантазией. Да, правда.

h2. Индивидуальные шаблоны

Иногда возникает необходимость создавать шаблоны, которые пригодны только для одного конкретного сервера. Для этого нужны custom_templates.
Для создания индивидуального шаблона необходимо в cookbook-е создать папку files/host-$server_fqdn и уже внутри неё создавать шаблоны. Имена индивидуальных шаблонов не должны пересекаться с именами общих шаблонов.

h3. Пример использования индивидуального шаблона

Задача: упростить конфигурирование однотипных поддоменов, различающихся только именем поддомена.

1. Создаем индивидуальный шаблон subdomain, включающий в себя общие шаблоны, который будет использоваться для всех поддоменов.
1.1 Создаем папку files/host-mysite.ru
1.2 Создаем шаблон files/host-mysite.ru/subdomain.erb:

<pre><code><% server = [
	{
		"args" => {
			"root" => "/var/www/#{@args[:subdomain]}.mysite.ru"
		},
		"name" => "backend-php-fpm"
	},
	{
		"name" => "location-static",
		"args" => {
			"root" => "/var/www/#{@args[:subdomain]}.mysite.ru"
		}
	}
]
%>

<% server.each do |t| %>
  <%= parse_command t["name"], t["args"] %>
<% end %></code></pre>

1.3 Создаем json для сервера:

<pre><code>{
    "mode": "production",
    "sites": {
        "subdomain1.investcafe.ru": {
            "templates": [
                {
                    "name": "subdomain",
                    "args": {
                        "subdomain": "subdomain1"
                    }
                }
            ],
            "modes": [
                "production"
            ],
            "names": [
                "~(.*)\\.subdomain1\\.mysite\\.ru"
            ],
            "listen": [
                "8.8.8.8:80"
            ]
        },
        "subdomain2.investcafe.ru": {
            "templates": [
                {
                    "name": "subdomain",
                    "args": {
                        "subdomain": "subdomain2"
                    }
                }
            ],
            "modes": [
                "production"
            ],
            "names": [
                "~(.*)\\.subdomain1\\.mysite\\.ru"
            ],
            "listen": [
                "8.8.8.8:80"
            ]
        },
        "subdomain3.investcafe.ru": {
            "templates": [
                {
                    "name": "subdomain",
                    "args": {
                        "subdomain": "subdomain3"
                    }
                }
            ],
            "modes": [
                "production"
            ],
            "names": [
                "~(.*)\\.subdomain1\\.mysite\\.ru"
            ],
            "listen": [
                "8.8.8.8:80"
            ]
        },
        "services": {
            "templates": [
                {
                    "name": "status-nginx"
                },
                {
                    "name": "status-php-fpm",
                    "args": {
                        "backend": "pool_0",
                        "location": "/pool_0/"
                    }
                }
            ]
        }
    },
    "server": {
        "settings": {
            
        }
    }
}</code></pre>

2. Chef-run
Готово!

3. Итоги
Получили индвидуальный темплейт, который объединяет сколько угодно общих темплейтов и позволяет на его основе создавать неограниченное поддоменов для сайта mysite.ru, имена которых передаются в темплейт через json.
